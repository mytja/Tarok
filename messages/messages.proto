syntax = "proto3";

package game_messages;

option go_package = "./backend/internal/messages";

message LoginRequest {}
message LoginInfo { string token = 1; }
message LoginResponse {
  message OK {}
  message Fail {}

  oneof type {
    OK ok = 1;
    Fail fail = 2;
  }
}

message Connect {}
message Disconnect {}
message Receive {}
message Send {}
message Request { int32 count = 1; }
message Remove {}
message ClearDesk {}
message Notification {}
message Leave {}

message ReplayLink { string replay = 1; }
message ReplayMove {}
message ReplaySelectGame { int32 game = 1; }
message StartEarly {}

message GameInfo {
  int32 gamesPlayed = 1;
  int32 gamesRequired = 2;
  bool canExtendGame = 3;
}

message GameEnd {
  oneof type {
    Results results = 1;
    Request request = 2;
  }
}

message Connection {
  bool custom_profile_picture = 1;
  int32 rating = 2;
  oneof type {
    Connect join = 3;
    Disconnect disconnect = 4;
    Leave leave = 5;
  }
}

message Licitiranje { int32 type = 1; }

message LicitiranjeStart {}

message Card {
  string id = 1;
  string userId = 2;
  oneof type {
    Receive receive = 3;
    Send send = 4;
    Request request = 5;
    Remove remove = 6;
  }
}

message GameStartCountdown { int32 countdown = 1; }

message User {
  string id = 1;
  string name = 2;
  int32 position = 3;
  bool customProfilePicture = 4;
}

message ResultsUser {
  repeated User user = 1;
  bool playing = 2;
  int32 points = 3;
  int32 trula = 4;
  int32 pagat = 5;
  int32 igra = 6;
  int32 razlika = 7;
  int32 kralj = 8;
  int32 kralji = 9;
  int32 kontra_pagat = 10;
  int32 kontra_igra = 11;
  int32 kontra_kralj = 12;
  int32 kontra_mondfang = 13;
  bool mondfang = 14;

  bool show_gamemode = 15;
  bool show_difference = 16;
  bool show_kralj = 17;
  bool show_pagat = 18;
  bool show_kralji = 19;
  bool show_trula = 20;
  bool radelc = 21;
  bool skisfang = 22;

  int32 rating_delta = 23;
}

message Stih {
  repeated Card card = 1;
  float worth = 2;
  bool pickedUpByPlaying = 3;
  string pickedUpBy = 4;
}

message Results {
  repeated ResultsUser user = 1;
  repeated Stih stih = 2;
  Predictions predictions = 3;
}

message GameStart { repeated User user = 1; }
message UserList { repeated User user = 1; }
message KingSelection {
  string card = 1;

  oneof type {
    Request request = 2;
    Send send = 3;
    Notification notification = 4;
  }
}
message TalonSelection {
  int32 part = 1;

  oneof type {
    Request request = 2;
    Send send = 3;
    Notification notification = 4;
  }
}
message Stash {
  repeated Card card = 1;
  int32 length = 2;

  oneof type {
    Request request = 3;
    Send send = 4;
    Notification notification = 5;
  }
}

message StashedTarock { Card card = 1; }

message Radelci { int32 radleci = 1; }

message StartPredictions {
  bool kralj_ultimo_kontra = 1;
  // bool trula_kontra = 2;
  // bool kralji_kontra = 3;
  bool pagat_ultimo_kontra = 4;
  bool igra_kontra = 5;
  bool valat_kontra = 6;
  bool barvni_valat_kontra = 7;

  bool pagat_ultimo = 8;
  bool trula = 9;
  bool kralji = 10;
  bool kralj_ultimo = 11;

  bool valat = 12;
  bool barvni_valat = 13;

  bool mondfang = 14;
  bool mondfang_kontra = 15;
}
message Predictions {
  User kralj_ultimo = 1;
  int32 kralj_ultimo_kontra = 2;
  User kralj_ultimo_kontra_dal = 3;

  User trula = 4;
  // int32 trula_kontra = 5;
  // User trula_kontra_dal = 6;

  User kralji = 7;
  // int32 kralji_kontra = 8;
  // User kralji_kontra_dal = 9;

  User pagat_ultimo = 10;
  int32 pagat_ultimo_kontra = 11;
  User pagat_ultimo_kontra_dal = 12;

  User igra = 13;
  int32 igra_kontra = 14;
  User igra_kontra_dal = 15;

  User valat = 16;
  User barvni_valat = 17;

  User mondfang = 18;
  int32 mondfang_kontra = 19;
  User mondfang_kontra_dal = 20;

  int32 gamemode = 22;
  bool changed = 23;
}

message TalonReveal { repeated Stih stih = 1; }
message PlayingReveal { User playing = 1; }

message InvitePlayer {}
message ClearHand {}

message Time {
  float currentTime = 1;
  bool start = 2;
}

message TournamentStatistics {
  int32 place = 1;
  int32 players = 2;
  int32 top_player_points = 3;
}

message TournamentGameStatisticInner {
  int32 game = 1;
  bool bots = 2;
  int32 amount = 3;
}

message TournamentGameStatistics {
  repeated TournamentGameStatisticInner statistics = 1;
}

message ChatMessage {
  string user_id = 1;
  string message = 2;
  bool custom_profile_picture = 3;
}

message Normal {}
message Tournament {}

message PrepareGameMode {
  oneof mode {
    Normal normal = 1;
    Tournament tournament = 2;
  }
}

message Message {
  string username = 1;
  string player_id = 2;
  bool silent = 4;

  oneof data {
    Connection connection = 10;
    Licitiranje licitiranje = 11;
    Card card = 12;
    LicitiranjeStart licitiranje_start = 13;
    GameStart game_start = 14;
    LoginRequest login_request = 15;
    LoginInfo login_info = 16;
    LoginResponse login_response = 17;
    ClearDesk clear_desk = 18;
    Results results = 19;
    UserList user_list = 20;
    KingSelection king_selection = 21;
    StartPredictions start_predictions = 22;
    Predictions predictions = 23;
    TalonReveal talon_reveal = 24;
    PlayingReveal playing_reveal = 25;
    TalonSelection talon_selection = 26;
    Stash stash = 27;
    GameEnd game_end = 28;
    GameStartCountdown game_start_countdown = 29;
    Predictions predictions_resend = 30;
    Radelci radelci = 31;
    Time time = 32;
    ChatMessage chat_message = 33;
    InvitePlayer invite_player = 34;
    StashedTarock stashed_tarock = 35;
    ClearHand clear_hand = 36;
    ReplayLink replay_link = 37;
    ReplayMove replay_move = 38;
    ReplaySelectGame replay_select_game = 39;
    GameInfo game_info = 40;
    StartEarly start_early = 41;
    PrepareGameMode prepare_game_mode = 42;
    TournamentStatistics tournament_statistics = 43;
    TournamentGameStatistics tournament_game_statistics = 44;
  }
}
